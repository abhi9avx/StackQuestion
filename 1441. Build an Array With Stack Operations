1441. Build an Array With Stack Operations

...................

You are given an array target and an integer n.

In each iteration, you will read a number from list = [1, 2, 3, ..., n].

Build the target array using the following operations:

"Push": Reads a new element from the beginning list, and pushes it in the array.
"Pop": Deletes the last element of the array.
If the target array is already built, stop reading more elements.
Return a list of the operations needed to build target. The test cases are generated so that the answer is unique.

 

Example 1:

Input: target = [1,3], n = 3
Output: ["Push","Push","Pop","Push"]
Explanation: 
Read number 1 and automatically push in the array -> [1]
Read number 2 and automatically push in the array then Pop it -> [1]
Read number 3 and automatically push in the array -> [1,3]
Example 2:

Input: target = [1,2,3], n = 3
Output: ["Push","Push","Push"]
Example 3:

Input: target = [1,2], n = 4
Output: ["Push","Push"]
Explanation: You only need to read the first 2 numbers and stop.
 

Constraints:

1 <= target.length <= 100
1 <= n <= 100
1 <= target[i] <= n
target is strictly increasing.

................................

class Solution {
public:
    vector<string> buildArray(vector<int>& target, int n) {
        vector<string> ans;
        int currElem=1; //Current Element tells the element to be added in the stack, first element added will be 1
        for(int i=0;i<target.size();i++){
            while(currElem!=target[i]){ //While we do not make current element equal to corresponding element in target array 
                ans.push_back("Push");  //We will simply push and pop those elements which are not in final target array
                ans.push_back("Pop");
                currElem++;
            }
            ans.push_back("Push"); //Pushing the target element in stack 
            currElem++;
        }
        return ans;
    }
};

.........................

class Solution {
public:
    vector<string> buildArray(vector<int>& target, int n) {
        vector<string> res;
        
        int i=1,j=0;// i for numbers and j for size of target array
        
        while(i<=n) 
        {
            if(j == target.size())
                break;
            if(i==target[j])
            {
                res.push_back("Push");
                i++;j++;
            }
            else
            {
                res.push_back("Push");
                res.push_back("Pop");
                i++;
            }
            
        }
        return res;
    }
};


.............................................................................
